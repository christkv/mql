
/* line 1 "sql_js.rl" */
// Establish the root object, `window` in the browser, or `global` on the server.
var root = this; 

// Create a refeence to this
var _ = new Object();
var isNode = false;

// Export the Underscore object for **CommonJS**, with backwards-compatibility
// for the old `require()` API. If we're not in CommonJS, add `_` to the
// global object.
if (typeof module !== 'undefined' && module.exports) {
  module.exports = _;
  root._ = _;
  isNode = true;
} else {
  root._ = _;
}

// Set up basic parser
var SQLParser = exports.SQLParser = function() {
}

var stringToBytes = function(string) {
  // If we are in node return a buffer
  if(isNode) return new Buffer(string);
  // Otherwise an array
  var bytes = [];  
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

var bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};



/* line 103 "sql_js.rl" */


/* line 55 "sql_js.js" */
const _sql_tables_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 2, 
	1, 6, 2, 2, 6, 2, 4, 5, 
	2, 6, 2
];

const _sql_tables_key_offsets = [
	0, 0, 3, 5, 7, 9, 11, 13, 
	15, 18, 18, 21, 26, 31, 36, 41, 
	44, 54, 63, 68, 71, 81, 88, 93, 
	98, 103, 108, 111, 121, 129, 143, 157, 
	169, 181, 189, 197, 211, 219, 231, 239, 
	247, 255, 269, 282, 296, 299, 312, 327, 
	342, 357, 372, 385, 401, 415, 430, 443, 
	458, 473, 488, 501, 517, 530, 545, 560, 
	575, 590, 603, 609, 625, 641, 655, 671, 
	685, 701, 717, 733, 749, 763, 770, 785, 
	800, 815, 830, 843, 859, 875, 891, 905, 
	921, 937, 953, 969, 983, 990
];

const _sql_tables_trans_keys = [
	40, 83, 115, 83, 115, 69, 101, 76, 
	108, 69, 101, 67, 99, 84, 116, 32, 
	9, 13, 32, 9, 13, 32, 70, 102, 
	9, 13, 32, 82, 114, 9, 13, 32, 
	79, 111, 9, 13, 32, 77, 109, 9, 
	13, 32, 9, 13, 32, 70, 96, 102, 
	9, 13, 65, 90, 95, 122, 32, 65, 
	70, 87, 97, 102, 119, 9, 13, 32, 
	83, 115, 9, 13, 32, 9, 13, 32, 
	70, 96, 102, 9, 13, 65, 90, 95, 
	122, 32, 70, 87, 102, 119, 9, 13, 
	32, 72, 104, 9, 13, 32, 69, 101, 
	9, 13, 32, 82, 114, 9, 13, 32, 
	69, 101, 9, 13, 32, 9, 13, 32, 
	70, 96, 102, 9, 13, 65, 90, 95, 
	122, 32, 96, 9, 13, 65, 90, 95, 
	122, 32, 65, 70, 87, 96, 97, 102, 
	119, 9, 13, 66, 90, 95, 122, 32, 
	65, 70, 87, 96, 97, 102, 119, 9, 
	13, 66, 90, 95, 122, 32, 70, 87, 
	96, 102, 119, 9, 13, 65, 90, 95, 
	122, 32, 70, 87, 96, 102, 119, 9, 
	13, 65, 90, 95, 122, 32, 96, 9, 
	13, 65, 90, 95, 122, 32, 95, 9, 
	13, 65, 90, 97, 122, 32, 65, 70, 
	87, 96, 97, 102, 119, 9, 13, 66, 
	90, 95, 122, 32, 95, 9, 13, 65, 
	90, 97, 122, 32, 70, 87, 96, 102, 
	119, 9, 13, 65, 90, 95, 122, 32, 
	95, 9, 13, 65, 90, 97, 122, 32, 
	95, 9, 13, 65, 90, 97, 122, 32, 
	95, 9, 13, 65, 90, 97, 122, 32, 
	41, 46, 87, 96, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 87, 
	96, 119, 9, 13, 48, 57, 65, 90, 
	95, 122, 32, 41, 46, 87, 96, 119, 
	9, 13, 48, 57, 65, 90, 95, 122, 
	32, 9, 13, 32, 41, 87, 96, 119, 
	9, 13, 48, 57, 65, 90, 95, 122, 
	32, 41, 72, 87, 96, 104, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 69, 87, 96, 101, 119, 9, 13, 
	48, 57, 65, 90, 95, 122, 32, 41, 
	82, 87, 96, 114, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 69, 
	87, 96, 101, 119, 9, 13, 48, 57, 
	65, 90, 95, 122, 32, 41, 87, 96, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 83, 87, 96, 115, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 87, 96, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 83, 87, 96, 115, 119, 9, 13, 
	48, 57, 65, 90, 95, 122, 32, 41, 
	87, 96, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 82, 87, 96, 
	114, 119, 9, 13, 48, 57, 65, 90, 
	95, 122, 32, 41, 79, 87, 96, 111, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 77, 87, 96, 109, 119, 
	9, 13, 48, 57, 65, 90, 95, 122, 
	32, 41, 87, 96, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	82, 87, 96, 114, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 87, 
	96, 119, 9, 13, 48, 57, 65, 90, 
	95, 122, 32, 41, 72, 87, 96, 104, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 69, 87, 96, 101, 119, 
	9, 13, 48, 57, 65, 90, 95, 122, 
	32, 41, 82, 87, 96, 114, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 69, 87, 96, 101, 119, 9, 13, 
	48, 57, 65, 90, 95, 122, 32, 41, 
	87, 96, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 87, 119, 9, 
	13, 32, 41, 46, 79, 87, 96, 111, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 77, 87, 96, 109, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 87, 96, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 46, 83, 87, 96, 115, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 46, 87, 96, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	72, 87, 96, 104, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	69, 87, 96, 101, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	82, 87, 96, 114, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	69, 87, 96, 101, 119, 9, 13, 48, 
	57, 65, 90, 95, 122, 32, 41, 46, 
	87, 96, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 46, 87, 119, 
	9, 13, 32, 41, 72, 87, 96, 104, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 69, 87, 96, 101, 119, 
	9, 13, 48, 57, 65, 90, 95, 122, 
	32, 41, 82, 87, 96, 114, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 69, 87, 96, 101, 119, 9, 13, 
	48, 57, 65, 90, 95, 122, 32, 41, 
	87, 96, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 46, 82, 87, 
	96, 114, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 46, 79, 87, 
	96, 111, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 46, 77, 87, 
	96, 109, 119, 9, 13, 48, 57, 65, 
	90, 95, 122, 32, 41, 46, 87, 96, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 72, 87, 96, 104, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 69, 87, 96, 101, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 82, 87, 96, 114, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 69, 87, 96, 101, 
	119, 9, 13, 48, 57, 65, 90, 95, 
	122, 32, 41, 46, 87, 96, 119, 9, 
	13, 48, 57, 65, 90, 95, 122, 32, 
	41, 46, 87, 119, 9, 13, 32, 41, 
	87, 119, 9, 13, 0
];

const _sql_tables_single_lengths = [
	0, 3, 2, 2, 2, 2, 2, 2, 
	1, 0, 1, 3, 3, 3, 3, 1, 
	4, 7, 3, 1, 4, 5, 3, 3, 
	3, 3, 1, 4, 2, 8, 8, 6, 
	6, 2, 2, 8, 2, 6, 2, 2, 
	2, 6, 5, 6, 1, 5, 7, 7, 
	7, 7, 5, 8, 6, 7, 5, 7, 
	7, 7, 5, 8, 5, 7, 7, 7, 
	7, 5, 4, 8, 8, 6, 8, 6, 
	8, 8, 8, 8, 6, 5, 7, 7, 
	7, 7, 5, 8, 8, 8, 6, 8, 
	8, 8, 8, 6, 5, 4
];

const _sql_tables_range_lengths = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 4, 4, 1, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 1
];

const _sql_tables_index_offsets = [
	0, 0, 4, 7, 10, 13, 16, 19, 
	22, 25, 26, 29, 34, 39, 44, 49, 
	52, 60, 69, 74, 77, 85, 92, 97, 
	102, 107, 112, 115, 123, 129, 141, 153, 
	163, 173, 179, 185, 197, 203, 213, 219, 
	225, 231, 242, 252, 263, 266, 276, 288, 
	300, 312, 324, 334, 347, 358, 370, 380, 
	392, 404, 416, 426, 439, 449, 461, 473, 
	485, 497, 507, 513, 526, 539, 550, 563, 
	574, 587, 600, 613, 626, 637, 644, 656, 
	668, 680, 692, 702, 715, 728, 741, 752, 
	765, 778, 791, 804, 815, 822
];

const _sql_tables_indicies = [
	0, 2, 2, 1, 2, 2, 1, 3, 
	3, 1, 4, 4, 1, 5, 5, 1, 
	6, 6, 1, 7, 7, 1, 8, 8, 
	1, 9, 10, 10, 9, 10, 11, 11, 
	10, 9, 10, 12, 12, 10, 9, 10, 
	13, 13, 10, 9, 10, 14, 14, 10, 
	9, 15, 15, 9, 15, 17, 18, 17, 
	15, 16, 16, 9, 19, 20, 11, 21, 
	20, 11, 21, 19, 9, 10, 22, 22, 
	10, 9, 23, 23, 9, 23, 25, 26, 
	25, 23, 24, 24, 9, 27, 11, 21, 
	11, 21, 27, 9, 10, 28, 28, 10, 
	9, 10, 29, 29, 10, 9, 10, 30, 
	30, 10, 9, 10, 31, 31, 10, 9, 
	32, 32, 9, 32, 34, 35, 34, 32, 
	33, 33, 9, 10, 37, 10, 36, 36, 
	9, 38, 39, 34, 40, 35, 39, 34, 
	40, 38, 33, 33, 9, 41, 42, 25, 
	43, 26, 42, 25, 43, 41, 24, 24, 
	9, 44, 25, 43, 26, 25, 43, 44, 
	24, 24, 9, 45, 17, 46, 18, 17, 
	46, 45, 16, 16, 9, 10, 48, 10, 
	47, 47, 9, 10, 47, 10, 47, 47, 
	9, 49, 50, 17, 46, 18, 50, 17, 
	46, 49, 16, 16, 9, 10, 51, 10, 
	51, 51, 9, 52, 34, 40, 35, 34, 
	40, 52, 33, 33, 9, 10, 53, 10, 
	53, 53, 9, 10, 24, 10, 24, 24, 
	9, 10, 36, 10, 36, 36, 9, 54, 
	55, 56, 57, 58, 57, 54, 51, 51, 
	51, 9, 27, 59, 43, 60, 43, 27, 
	24, 24, 24, 9, 54, 55, 61, 62, 
	63, 62, 54, 53, 53, 53, 9, 10, 
	10, 9, 54, 55, 64, 65, 64, 54, 
	36, 36, 36, 9, 54, 55, 66, 64, 
	65, 66, 64, 54, 36, 36, 36, 9, 
	54, 55, 67, 64, 65, 67, 64, 54, 
	36, 36, 36, 9, 54, 55, 68, 64, 
	65, 68, 64, 54, 36, 36, 36, 9, 
	54, 55, 69, 64, 65, 69, 64, 54, 
	36, 36, 36, 9, 70, 55, 64, 65, 
	64, 70, 36, 36, 36, 9, 54, 55, 
	61, 71, 62, 63, 71, 62, 54, 53, 
	53, 53, 9, 72, 55, 61, 62, 63, 
	62, 72, 53, 53, 53, 9, 27, 59, 
	73, 43, 60, 73, 43, 27, 24, 24, 
	24, 9, 44, 59, 43, 60, 43, 44, 
	24, 24, 24, 9, 27, 59, 74, 43, 
	60, 74, 43, 27, 24, 24, 24, 9, 
	27, 59, 75, 43, 60, 75, 43, 27, 
	24, 24, 24, 9, 27, 59, 76, 43, 
	60, 76, 43, 27, 24, 24, 24, 9, 
	45, 59, 43, 60, 43, 45, 24, 24, 
	24, 9, 54, 55, 56, 77, 57, 58, 
	77, 57, 54, 51, 51, 51, 9, 54, 
	55, 78, 65, 78, 54, 47, 47, 47, 
	9, 54, 55, 79, 78, 65, 79, 78, 
	54, 47, 47, 47, 9, 54, 55, 80, 
	78, 65, 80, 78, 54, 47, 47, 47, 
	9, 54, 55, 81, 78, 65, 81, 78, 
	54, 47, 47, 47, 9, 54, 55, 82, 
	78, 65, 82, 78, 54, 47, 47, 47, 
	9, 83, 55, 78, 65, 78, 83, 47, 
	47, 47, 9, 54, 55, 84, 84, 54, 
	9, 54, 55, 56, 85, 57, 58, 85, 
	57, 54, 51, 51, 51, 9, 54, 55, 
	56, 86, 57, 58, 86, 57, 54, 51, 
	51, 51, 9, 87, 55, 56, 57, 58, 
	57, 87, 51, 51, 51, 9, 54, 55, 
	56, 88, 57, 58, 88, 57, 54, 51, 
	51, 51, 9, 72, 55, 56, 57, 58, 
	57, 72, 51, 51, 51, 9, 54, 55, 
	56, 89, 57, 58, 89, 57, 54, 51, 
	51, 51, 9, 54, 55, 56, 90, 57, 
	58, 90, 57, 54, 51, 51, 51, 9, 
	54, 55, 56, 91, 57, 58, 91, 57, 
	54, 51, 51, 51, 9, 54, 55, 56, 
	92, 57, 58, 92, 57, 54, 51, 51, 
	51, 9, 83, 55, 56, 57, 58, 57, 
	83, 51, 51, 51, 9, 54, 55, 56, 
	84, 84, 54, 9, 27, 59, 93, 43, 
	60, 93, 43, 27, 24, 24, 24, 9, 
	27, 59, 94, 43, 60, 94, 43, 27, 
	24, 24, 24, 9, 27, 59, 95, 43, 
	60, 95, 43, 27, 24, 24, 24, 9, 
	27, 59, 96, 43, 60, 96, 43, 27, 
	24, 24, 24, 9, 52, 59, 43, 60, 
	43, 52, 24, 24, 24, 9, 54, 55, 
	61, 97, 62, 63, 97, 62, 54, 53, 
	53, 53, 9, 54, 55, 61, 98, 62, 
	63, 98, 62, 54, 53, 53, 53, 9, 
	54, 55, 61, 99, 62, 63, 99, 62, 
	54, 53, 53, 53, 9, 87, 55, 61, 
	62, 63, 62, 87, 53, 53, 53, 9, 
	54, 55, 61, 100, 62, 63, 100, 62, 
	54, 53, 53, 53, 9, 54, 55, 61, 
	101, 62, 63, 101, 62, 54, 53, 53, 
	53, 9, 54, 55, 61, 102, 62, 63, 
	102, 62, 54, 53, 53, 53, 9, 54, 
	55, 61, 103, 62, 63, 103, 62, 54, 
	53, 53, 53, 9, 70, 55, 61, 62, 
	63, 62, 70, 53, 53, 53, 9, 54, 
	55, 61, 84, 84, 54, 9, 27, 59, 
	21, 21, 27, 9, 0
];

const _sql_tables_trans_targs = [
	2, 0, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	41, 59, 36, 17, 18, 22, 19, 20, 
	42, 55, 39, 21, 23, 24, 25, 26, 
	27, 43, 83, 38, 45, 40, 29, 51, 
	87, 30, 53, 78, 31, 32, 72, 60, 
	34, 35, 70, 41, 37, 43, 17, 44, 
	33, 72, 77, 44, 93, 28, 87, 92, 
	46, 66, 47, 48, 49, 50, 29, 52, 
	30, 54, 56, 57, 58, 67, 61, 62, 
	63, 64, 65, 29, 22, 68, 69, 35, 
	71, 73, 74, 75, 76, 79, 80, 81, 
	82, 84, 85, 86, 88, 89, 90, 91
];

const _sql_tables_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 1, 
	7, 0, 0, 9, 0, 0, 0, 3, 
	11, 21, 11, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	5, 11, 21, 11, 0, 0, 5, 11, 
	11, 0, 0, 0, 0, 3, 11, 0, 
	0, 3, 11, 0, 5, 0, 13, 13, 
	0, 13, 0, 0, 0, 0, 13, 0, 
	13, 0, 0, 0, 0, 0, 18, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 24, 13, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _sql_tables_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 0, 13, 13, 13, 
	13, 13, 13, 13, 13, 0, 0, 0, 
	0, 0, 0, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 0, 0, 
	0, 0, 0, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 0
];

const sql_tables_start = 1;
const sql_tables_first_final = 41;
const sql_tables_error = 0;

const sql_tables_en_main = 1;


/* line 105 "sql_js.rl" */

// '('? _select fields _from table (_join table)* ')'?
// _join = (space* ',' space*|(space+ ('inner'i|'left'i|'right'i|'outer'i))? space+ 'join'i space+);

SQLParser.prototype.scan = function(statement) {
  // We have a Buffer, use that
  var data = typeof statement.write == 'function' ? statement : stringToBytes(statement);

  // Set up internal variables for use during the state-machine execution
  var cs = 0;
  var p = 0;
  var pe = data.length;
  var eof = data.length;
  var item = 0;
  var stack = new Array(1024);
  var stack_size = 1;
  var top = 0;
  
  // Set up internal storage variables express the statement
  var query = {fields:{}, from:null, where:{}};
    
  
/* line 435 "sql_js.js" */
{
	 cs = sql_tables_start;
} /* JSCodeGen::writeInit */

/* line 127 "sql_js.rl" */
  
/* line 442 "sql_js.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if (cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _sql_tables_key_offsets[cs];
	_trans = _sql_tables_index_offsets[cs];
	_klen = _sql_tables_single_lengths[cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (data[p] < _sql_tables_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (data[p] > _sql_tables_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _sql_tables_range_lengths[cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (data[p] < _sql_tables_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (data[p] > _sql_tables_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _sql_tables_indicies[_trans];
	cs = _sql_tables_trans_targs[_trans];
	if (_sql_tables_trans_actions[_trans] != 0) {
		_acts = _sql_tables_trans_actions[_trans];
		_nacts = _sql_tables_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_sql_tables_actions[_acts - 1]) {
case 0:
/* line 51 "sql_js.rl" */

      // Identify select
      console.log("select :: " + p)
    		break;
case 1:
/* line 56 "sql_js.rl" */

      // Identify from
      console.log("from")
    		break;
case 2:
/* line 61 "sql_js.rl" */

      // Identify where
      console.log("where")      
    		break;
case 3:
/* line 66 "sql_js.rl" */

      // Cut out the fields
      item = p
    		break;
case 4:
/* line 70 "sql_js.rl" */
      
      // Split up the fields
      var fieldStrings = data.slice(item, p).toString().trim().split(/\,/);
      // Add them to the list of fields to query
      for(var i = 0; i < fieldStrings.length; i++) {
        query.fields[fieldStrings[i].trim()] = 1;
      }      
    		break;
case 5:
/* line 79 "sql_js.rl" */

      // Cut out the table name
      item = p;
    		break;
case 6:
/* line 83 "sql_js.rl" */
   
      query.from = data.slice(item, p).toString();
    		break;
/* line 571 "sql_js.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if (cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _sql_tables_eof_actions[cs];
	__nacts =  _sql_tables_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_sql_tables_actions[__acts - 1]) {
case 6:
/* line 83 "sql_js.rl" */
   
      query.from = data.slice(item, p).toString();
    		break;
/* line 604 "sql_js.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 128 "sql_js.rl" */

  console.log("----------------------------------------------------------------")
  console.dir(query)
}
    
var _p = new SQLParser();
_p.scan("select a.done,b from atable where a");
    